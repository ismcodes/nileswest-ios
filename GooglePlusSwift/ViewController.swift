//
//  ViewController.swift
//  GooglePlusSwift
//
//  Created by Fernando Olivares on 10/15/14.
//  Copyright (c) 2014 Spiffy. All rights reserved.
//

import UIKit
import MessageUI
//G+
import AddressBook
import MediaPlayer
import AssetsLibrary
import CoreLocation
import CoreMotion
var veew : UIScrollView?
weak var sw: UISwitch!
var email = ""

let Device = UIDevice.currentDevice()

private let iosVersion = NSString(string: Device.systemVersion).doubleValue

let iOS8 = iosVersion >= 8
let iOS7 = iosVersion >= 7 && iosVersion < 8


class ViewController: UIViewController, GPPSignInDelegate, MFMailComposeViewControllerDelegate {
    
    @IBOutlet var scrollView : UIScrollView!
    
//    @IBOutlet weak var segmentedControl: UISegmentedControl!
    @IBOutlet weak var closeButton: UIImageView!
    @IBOutlet weak var feedbackButton: UIImageView!
    @IBOutlet weak var textLabel: UITextField!
    var mc: MFMailComposeViewController = MFMailComposeViewController()
    @IBOutlet weak var swi: UISwitch!
    @IBAction func closeButtonPresed(recognizer: UITapGestureRecognizer){
        let request = NSMutableURLRequest(URL: NSURL(string: "https://nileswest.herokuapp.com/change_status")!)
        request.HTTPMethod = "POST"
        
        let postString = "email="+email+"&secret_key=DEVISING&status=0"
        request.HTTPBody = postString.dataUsingEncoding(NSUTF8StringEncoding)
        let task = NSURLSession.sharedSession().dataTaskWithRequest(request) {
            data, response, error in
            
            if error != nil {
                println("error=\(error)")
                return
            }
            
            println("response = \(response)")
            
            let responseString = NSString(data: data, encoding: NSUTF8StringEncoding)
            println("responseString = \(responseString)")
            exit(0)
        }
        task.resume()
    }
    
     @IBAction func feedbackButtonPressed(recognizer: UITapGestureRecognizer){
        println("feedback clicked")
        if MFMailComposeViewController.canSendMail(){
        mc = MFMailComposeViewController()
        mc.mailComposeDelegate = self
        mc.setToRecipients(["isamol1@nths219.org"])
        mc.setSubject("Lit Center iOS App")
        var body = "Hey Isaac.\n\nJust wanted to say, " +
        "I think you've put together a really great product here. " +
        "Keep up the good work!\n\n" +
        "With warm regards,\n\n"
        body += NSUserDefaults.standardUserDefaults().stringForKey("name")!
        body += "\n(if you have non-autogenerated feedback, feel free to erase everything here)"
        mc.setMessageBody(body, isHTML: false)
        self.presentViewController(mc, animated: true, completion: nil)
        }
    }
    
    func mailComposeController(controller:MFMailComposeViewController, didFinishWithResult result:MFMailComposeResult, error:NSError) {
        println("MAILS HERE")
        switch result.value {
        case MFMailComposeResultCancelled.value:
            NSLog("Mail cancelled")
        case MFMailComposeResultSaved.value:
            NSLog("Mail saved")
        case MFMailComposeResultSent.value:
            NSLog("Mail sent")
        case MFMailComposeResultFailed.value:
            NSLog("Mail sent failure: %@", [error.localizedDescription])
        default:
            break
        }
        self.dismissViewControllerAnimated(true, completion: nil)
    }
    
//    @IBAction func indexChanged(sender: UISegmentedControl) {
//        switch segmentedControl.selectedSegmentIndex
//        {
//        case 0:
//            textLabel.text = "Accept selected";
//            
//            let request = NSMutableURLRequest(URL: NSURL(string: "https://nileswest.herokuapp.com/change_status")!)
//            request.HTTPMethod = "POST"
//            
//            let name = ""
//            let subject = ""
//            
//            let postString = "email="+email+"&secret_key=DEVISING&name="+name+"&subject="+subject
//            request.HTTPBody = postString.dataUsingEncoding(NSUTF8StringEncoding)
//            let task = NSURLSession.sharedSession().dataTaskWithRequest(request) {
//                data, response, error in
//                
//                if error != nil {
//                    println("error=\(error)")
//                    return
//                }
//                
//                println("response = \(response)")
//                
//                let responseString = NSString(data: data, encoding: NSUTF8StringEncoding)
//                println("responseString = \(responseString)")
//            }
//            task.resume()
//
//        case 1:
//            textLabel.text = "Decline selected";
//        default:
//            break;
//        }
//
//    }
    
    
//    let gridBuilder : () -> UIView =  {
//        let ch4 = UILabel(frame : CGRect())
//        ch4.text = ns
//        
//        let ch5 = UIView(frame : CGRect())
//        ch5.backgroundColor = UIColor.orangeColor()
//        
//        let ch6 = UIView(frame : CGRect())
//        ch6.backgroundColor = UIColor.yellowColor()
//        var r = arc4random_uniform(10)
//        if(r>4){
//            ch6.backgroundColor = UIColor.blueColor()
//        }
//        else if(r>7){
//            ch6.backgroundColor = UIColor.greenColor()
//        }
//        
//        let h = LineLayout(frame: CGRectMake(100,100,100,100))//CGRectMake(self.scrollView.frame.minX, self.scrollView.frame.minY, self.scrollView.frame.width, self.scrollView.frame.height))
//        h.direction = .Horizontal
//        
//        h.addSubview(ch4)
//        h.addSubview(ch5)
//        h.addSubview(ch6)
//        
//        return h
//    }
    
    class func accept(sender: UIButton){
     
        var ns = (sender.superview?.subviews.first as UILabel).text?.componentsSeparatedByString("::") //suh-WEET
        var name = ns?[0]
        var subject = ns?[1]
        
        if let a = veew?.subviews{
        for vw in a {
            if let vll = vw as? LineLayout{
            vw.removeFromSuperview()
            }
        }
            screenCount = 0
            
        }
        
        let request = NSMutableURLRequest(URL: NSURL(string: "https://nileswest.herokuapp.com/resolve")!)
        request.HTTPMethod = "POST"
        
        
        let postString = "email="+email+"&secret_key=DEVISING&name="+name!+"&subject="+subject!
        request.HTTPBody = postString.dataUsingEncoding(NSUTF8StringEncoding)
        let task = NSURLSession.sharedSession().dataTaskWithRequest(request) {
            data, response, error in
            
            if error != nil {
                println("error=\(error)")
                return
            }
            
            println("response = \(response)")
            
            let responseString = NSString(data: data, encoding: NSUTF8StringEncoding)
            println("responseString = \(responseString)")
        }
        task.resume()
        
        sw.setOn(true, animated: true)
    }
    class func reject(sender: UIButton){
        veew?.contentSize.height -= 100
        //THE MISSION:
        //1. INFILTRATE THE UISCROLLVIEW SUBVIEW LIST
        //2. LOCATE THE INDEX OF THE TARGET TO BE DELETED
        //3. EVERYTHING BELOW IT SHOULD BE BLOWN UP
        //no but really it should be moved up by 100 lol
        var ns = (sender.superview?.subviews[0] as UILabel).text
        var targetAcquired = false
        if let a = veew?.subviews{
        for vw in a{
            if let vll = vw as? LineLayout{
            var vtext = (vll.subviews[0] as UILabel).text
            if targetAcquired{
                vll.frame.origin.y-=100
            }
            if vtext == ns && !targetAcquired{
                targetAcquired = true
                vw.removeFromSuperview()
            }
            }
        }
        }
    }
    
    @IBAction func switchClicked(sender: UISwitch) {
            println("switch has been clicked")
        
            let request = NSMutableURLRequest(URL: NSURL(string: "https://nileswest.herokuapp.com/change_status")!)
            request.HTTPMethod = "POST"
            var status = 2
            if sender.on{
                status = 1
                //clear the current requests
                if let a = veew?.subviews{
                    for vw in a {
                        if let vll = vw as? LineLayout{
                            vw.removeFromSuperview()
                        }
                    }
                    screenCount = 0
                    
                }
        }

            let postString = "email="+email+"&secret_key=DEVISING&status="+String(status)
            request.HTTPBody = postString.dataUsingEncoding(NSUTF8StringEncoding)
            let task = NSURLSession.sharedSession().dataTaskWithRequest(request) {
                data, response, error in
                
                if error != nil {
                    println("error=\(error)")
                    return
                }
                
                println("response = \(response)")
                
                let responseString = NSString(data: data, encoding: NSUTF8StringEncoding)
                println("responseString = \(responseString)")
            }
            task.resume()
       
    }
    
    class func deleteFromScreen(nameAndSubject: String){
        var found = false
        if let vs = veew?.subviews{
            for vw in vs{
                if let vll = vw as? LineLayout{
                    if found{
                        vll.frame.origin.y-=100
                    }
                    else{
                        var ns = vll.subviews[0] as? UILabel
                        if ns?.text == nameAndSubject{
                            found = true
                            vll.removeFromSuperview()
                        }
                    }
                }
            }
        }
    }
     class func addToScreen(nameAndSubject: String){
        
        let ns = UILabel(frame : CGRect())
        ns.text = nameAndSubject
        
        let no = UIButton.buttonWithType(UIButtonType.System) as UIButton
        no.frame = CGRect()
        no.setTitle("No", forState: UIControlState.Normal)
        no.backgroundColor = UIColor.redColor()
        no.userInteractionEnabled = true
        no.addTarget(self, action: Selector("reject:"), forControlEvents: UIControlEvents.TouchUpInside)
        
        let yes = UIButton.buttonWithType(UIButtonType.System) as UIButton
        yes.frame = CGRect()
        yes.setTitle("Yes", forState: UIControlState.Normal)
        yes.backgroundColor = UIColor.greenColor()
        yes.userInteractionEnabled = true
        yes.addTarget(self, action: Selector("accept:"), forControlEvents: UIControlEvents.TouchUpInside)
        
        
        var sc = screenCount*100 + 50
        let h = LineLayout(frame: CGRectMake(10,CGFloat(sc),300,100))//CGRectMake(self.scrollView.frame.minX, self.scrollView.frame.minY, self.scrollView.frame.width, self.scrollView.frame.height))
        h.direction = .Horizontal
        h.addSubview(ns)
        h.addSubview(no)
        h.addSubview(yes)
//        for s in h.subviews{
//            print("type")
//        }
//        print("linear subviews ^")
//        let c = UIView()
//        c.addSubview(ns)
//        c.addSubview(no)
//        c.addSubview(yes)
//        for s in c.subviews{
//            print("type2")
//        }
//        print("uiview subviews ^")
        veew?.addSubview(h)
        veew?.contentSize.height += 100
        screenCount++

    }
    
    
    func checkToEnableSwitch(){
        let request = NSMutableURLRequest(URL: NSURL(string: "https://nileswest.herokuapp.com/get_status")!)
        request.HTTPMethod = "POST"
        
        let postString = "email="+email+"&secret_key=DEVISING"
        request.HTTPBody = postString.dataUsingEncoding(NSUTF8StringEncoding)
        let task = NSURLSession.sharedSession().dataTaskWithRequest(request) {
            data, response, error in
            
            if error != nil {
                println("error=\(error)")
                return
            }
            
            println("response = \(response)")
                       let responseString = NSString(data: data, encoding: NSUTF8StringEncoding)
            println("responseString = \(responseString)")
            println(String(responseString!))
            if String(responseString!).rangeOfString("YES I AM TUTOR") != nil {
                sw.setOn(true, animated: true)
                println("tutoring")
            }
        }
        task.resume()
    }
    
    var signIn : GPPSignIn?
    
    override func viewDidLoad() {
        super.viewDidLoad()
//        seg = segmentedControl
        sw = swi
        scrollView.userInteractionEnabled = true;
        scrollView.scrollEnabled = true;
        self.scrollView.frame = self.view.bounds
        self.scrollView.contentSize.height = CGFloat(screenCount*100 + 50);
        veew = scrollView
        
//        let grid = gridBuilder()
//        self.scrollView.addSubview(grid)
//
//        self.scrollView.addConstraints(NSLayoutConstraint.constraintsWithVisualFormat("H:|[grid]|", options: NSLayoutFormatOptions.allZeros, metrics: nil, views: ["grid" : grid]))
//        self.scrollView.addConstraints(NSLayoutConstraint.constraintsWithVisualFormat("V:|[grid]|", options: NSLayoutFormatOptions.allZeros, metrics: nil, views: ["grid" : grid]))
        
        
        
        signIn = GPPSignIn.sharedInstance()
        signIn?.shouldFetchGoogleUserEmail = true
        signIn?.shouldFetchGoogleUserID = true
        signIn?.shouldFetchGooglePlusUser = true
        signIn?.clientID = "492971078631-jc36td2n8vds9tcscacuso3gvd0kg7l7.apps.googleusercontent.com"
        signIn?.scopes = [
            kGTLAuthScopePlusMe,
            kGTLAuthScopePlusUserinfoEmail]
        signIn?.delegate = self
        signIn?.authenticate()
    }

    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }

    //MARK: G+
    func finishedWithAuth(auth: GTMOAuth2Authentication!, error: NSError!) {
        println("======")
        println(auth.userEmail)
        email = auth.userEmail
        println("======")
        println(GPPSignIn.sharedInstance().googlePlusUser.displayName)
        NSUserDefaults.standardUserDefaults().setValue(GPPSignIn.sharedInstance().googlePlusUser.displayName, forKey: "name")
        println("======")
        println(GPPSignIn.sharedInstance().googlePlusUser.image.url)
        NSUserDefaults.standardUserDefaults().setValue(GPPSignIn.sharedInstance().googlePlusUser.image.url, forKey: "photoUrl")
        println("======")
        NSUserDefaults.standardUserDefaults().setValue(email, forKey: "email")
        
        checkToEnableSwitch()
        
        if iOS8{ //if(NSURLSession.respondsToSelector(Selector("isOperatingSystemAtLeastVersion(NSOperatingSystemVersion"))){
        print("IOS 8")
        var type = UIUserNotificationType.Badge | UIUserNotificationType.Alert | UIUserNotificationType.Sound;
        var setting = UIUserNotificationSettings(forTypes: type, categories: nil);
        
        // Sets up Mobile Push Notification
        let readAction = UIMutableUserNotificationAction()
        readAction.identifier = "READ_IDENTIFIER"
        readAction.title = "Read"
        readAction.activationMode = UIUserNotificationActivationMode.Foreground
        readAction.destructive = false
        readAction.authenticationRequired = true
        
        let deleteAction = UIMutableUserNotificationAction()
        deleteAction.identifier = "DELETE_IDENTIFIER"
        deleteAction.title = "Delete"
        deleteAction.activationMode = UIUserNotificationActivationMode.Foreground
        deleteAction.destructive = true
        deleteAction.authenticationRequired = true
        
        let ignoreAction = UIMutableUserNotificationAction()
        ignoreAction.identifier = "IGNORE_IDENTIFIER"
        ignoreAction.title = "Ignore"
        ignoreAction.activationMode = UIUserNotificationActivationMode.Foreground
        ignoreAction.destructive = false
        ignoreAction.authenticationRequired = false
        
        let messageCategory = UIMutableUserNotificationCategory()
        messageCategory.identifier = "MESSAGE_CATEGORY"
        messageCategory.setActions([readAction, deleteAction], forContext: UIUserNotificationActionContext.Minimal)
        messageCategory.setActions([readAction, deleteAction, ignoreAction], forContext: UIUserNotificationActionContext.Default)
        
        let types = UIUserNotificationType.Badge | UIUserNotificationType.Sound | UIUserNotificationType.Alert
        let notificationSettings = UIUserNotificationSettings(forTypes: types, categories: NSSet(object: messageCategory))
        
        UIApplication.sharedApplication().registerForRemoteNotifications()
        UIApplication.sharedApplication().registerUserNotificationSettings(notificationSettings)
        }
        else{
            print("IOS <8")
            UIApplication.sharedApplication().registerForRemoteNotificationTypes(
                                                        UIRemoteNotificationType.Sound | UIRemoteNotificationType.Badge)
            
        }
        func application(application: UIApplication, handleActionWithIdentifier identifier: String?, forRemoteNotification userInfo: [NSObject : AnyObject], completionHandler: () -> Void) {
            if identifier == "READ_IDENTIFIER" {
                println("User selected 'Read'")
                
            } else if identifier == "DELETE_IDENTIFIER" {
                println("User selected 'Delete'")
            }
            
            completionHandler()
        }
        
    }
    
    func didDisconnectWithError(error: NSError!) {
        println(error.localizedDescription)
        
    }
    
    
    
    
}

